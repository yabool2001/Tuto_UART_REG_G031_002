
Tuto_UART_REG_G031_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000548  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000608  08000610  00010610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000608  08000608  00010610  2**0
                  CONTENTS
  4 .ARM          00000000  08000608  08000608  00010610  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000608  08000610  00010610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000608  08000608  00010608  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800060c  0800060c  0001060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010610  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000610  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000610  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00010610  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010638  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dff  00000000  00000000  0001067b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000003bd  00000000  00000000  0001147a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000d0  00000000  00000000  00011838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000089  00000000  00000000  00011908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c463  00000000  00000000  00011991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001287  00000000  00000000  0001ddf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00044c0c  00000000  00000000  0001f07b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001e4  00000000  00000000  00063c88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00063e6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080005f0 	.word	0x080005f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080005f0 	.word	0x080005f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
#define MY_UART2_BAUDRATE	(uint16_t) 115200

uint8_t my_tim16_up = 0 ;

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	my_uart2_init () ;
 8000224:	f000 f94c 	bl	80004c0 <my_uart2_init>
	my_uart2_on ( MY_G031_SYSCLOCK , MY_UART2_BAUDRATE ) ;
 8000228:	23c2      	movs	r3, #194	; 0xc2
 800022a:	021a      	lsls	r2, r3, #8
 800022c:	2390      	movs	r3, #144	; 0x90
 800022e:	019b      	lsls	r3, r3, #6
 8000230:	0011      	movs	r1, r2
 8000232:	0018      	movs	r0, r3
 8000234:	f000 f97c 	bl	8000530 <my_uart2_on>
	while ( !( USART2->ISR & USART_ISR_TXE_TXFNF ) )
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	4b11      	ldr	r3, [pc, #68]	; (8000280 <main+0x60>)
 800023c:	69db      	ldr	r3, [r3, #28]
 800023e:	2280      	movs	r2, #128	; 0x80
 8000240:	4013      	ands	r3, r2
 8000242:	d0fa      	beq.n	800023a <main+0x1a>
	{
		;
	}
	USART2->TDR = 'A' ;
 8000244:	4b0e      	ldr	r3, [pc, #56]	; (8000280 <main+0x60>)
 8000246:	2241      	movs	r2, #65	; 0x41
 8000248:	629a      	str	r2, [r3, #40]	; 0x28
	config_my_tim16 ( MY_G031_SYSCLOCK ) ;
 800024a:	2390      	movs	r3, #144	; 0x90
 800024c:	019b      	lsls	r3, r3, #6
 800024e:	0018      	movs	r0, r3
 8000250:	f000 f8de 	bl	8000410 <config_my_tim16>
	start_my_tim16 ( (uint16_t) 1000 ) ;
 8000254:	23fa      	movs	r3, #250	; 0xfa
 8000256:	009b      	lsls	r3, r3, #2
 8000258:	0018      	movs	r0, r3
 800025a:	f000 f911 	bl	8000480 <start_my_tim16>
/* Loop forever */
	while ( 1 )
	{
		if ( my_tim16_up == 1)
 800025e:	4b09      	ldr	r3, [pc, #36]	; (8000284 <main+0x64>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b01      	cmp	r3, #1
 8000264:	d1fb      	bne.n	800025e <main+0x3e>
		{
			my_tim16_up = 0 ;
 8000266:	4b07      	ldr	r3, [pc, #28]	; (8000284 <main+0x64>)
 8000268:	2200      	movs	r2, #0
 800026a:	701a      	strb	r2, [r3, #0]
			if ( USART2->ISR & USART_ISR_TXE_TXFNF )
 800026c:	4b04      	ldr	r3, [pc, #16]	; (8000280 <main+0x60>)
 800026e:	69db      	ldr	r3, [r3, #28]
 8000270:	2280      	movs	r2, #128	; 0x80
 8000272:	4013      	ands	r3, r2
 8000274:	d0f3      	beq.n	800025e <main+0x3e>
				USART2->TDR = 0x41 ;
 8000276:	4b02      	ldr	r3, [pc, #8]	; (8000280 <main+0x60>)
 8000278:	2241      	movs	r2, #65	; 0x41
 800027a:	629a      	str	r2, [r3, #40]	; 0x28
		if ( my_tim16_up == 1)
 800027c:	e7ef      	b.n	800025e <main+0x3e>
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	40004400 	.word	0x40004400
 8000284:	2000001c 	.word	0x2000001c

08000288 <TIM16_IRQHandler>:
		}
	}
}

void TIM16_IRQHandler ( void )
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
	my_tim16_up = 1 ;
 800028c:	4b05      	ldr	r3, [pc, #20]	; (80002a4 <TIM16_IRQHandler+0x1c>)
 800028e:	2201      	movs	r2, #1
 8000290:	701a      	strb	r2, [r3, #0]
	TIM16->SR &= ~TIM_SR_UIF ;		//Clean UIF Flag
 8000292:	4b05      	ldr	r3, [pc, #20]	; (80002a8 <TIM16_IRQHandler+0x20>)
 8000294:	691a      	ldr	r2, [r3, #16]
 8000296:	4b04      	ldr	r3, [pc, #16]	; (80002a8 <TIM16_IRQHandler+0x20>)
 8000298:	2101      	movs	r1, #1
 800029a:	438a      	bics	r2, r1
 800029c:	611a      	str	r2, [r3, #16]
}
 800029e:	46c0      	nop			; (mov r8, r8)
 80002a0:	46bd      	mov	sp, r7
 80002a2:	bd80      	pop	{r7, pc}
 80002a4:	2000001c 	.word	0x2000001c
 80002a8:	40014400 	.word	0x40014400

080002ac <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002ac:	480d      	ldr	r0, [pc, #52]	; (80002e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002ae:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002b0:	e000      	b.n	80002b4 <Reset_Handler+0x8>
 80002b2:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002b4:	480c      	ldr	r0, [pc, #48]	; (80002e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80002b8:	4a0d      	ldr	r2, [pc, #52]	; (80002f0 <LoopForever+0xe>)
  movs r3, #0
 80002ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002bc:	e002      	b.n	80002c4 <LoopCopyDataInit>

080002be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002c2:	3304      	adds	r3, #4

080002c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002c8:	d3f9      	bcc.n	80002be <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ca:	4a0a      	ldr	r2, [pc, #40]	; (80002f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002cc:	4c0a      	ldr	r4, [pc, #40]	; (80002f8 <LoopForever+0x16>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002d0:	e001      	b.n	80002d6 <LoopFillZerobss>

080002d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002d4:	3204      	adds	r2, #4

080002d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002d8:	d3fb      	bcc.n	80002d2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002da:	f000 f965 	bl	80005a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002de:	f7ff ff9f 	bl	8000220 <main>

080002e2 <LoopForever>:

LoopForever:
  b LoopForever
 80002e2:	e7fe      	b.n	80002e2 <LoopForever>
  ldr   r0, =_estack
 80002e4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80002e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002ec:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002f0:	08000610 	.word	0x08000610
  ldr r2, =_sbss
 80002f4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002f8:	20000020 	.word	0x20000020

080002fc <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002fc:	e7fe      	b.n	80002fc <ADC_COMP_IRQHandler>
	...

08000300 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
 8000306:	0002      	movs	r2, r0
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800030c:	1dfb      	adds	r3, r7, #7
 800030e:	781b      	ldrb	r3, [r3, #0]
 8000310:	2b7f      	cmp	r3, #127	; 0x7f
 8000312:	d809      	bhi.n	8000328 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000314:	1dfb      	adds	r3, r7, #7
 8000316:	781b      	ldrb	r3, [r3, #0]
 8000318:	001a      	movs	r2, r3
 800031a:	231f      	movs	r3, #31
 800031c:	401a      	ands	r2, r3
 800031e:	4b04      	ldr	r3, [pc, #16]	; (8000330 <__NVIC_EnableIRQ+0x30>)
 8000320:	2101      	movs	r1, #1
 8000322:	4091      	lsls	r1, r2
 8000324:	000a      	movs	r2, r1
 8000326:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000328:	46c0      	nop			; (mov r8, r8)
 800032a:	46bd      	mov	sp, r7
 800032c:	b002      	add	sp, #8
 800032e:	bd80      	pop	{r7, pc}
 8000330:	e000e100 	.word	0xe000e100

08000334 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000334:	b590      	push	{r4, r7, lr}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	0002      	movs	r2, r0
 800033c:	6039      	str	r1, [r7, #0]
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000342:	1dfb      	adds	r3, r7, #7
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b7f      	cmp	r3, #127	; 0x7f
 8000348:	d828      	bhi.n	800039c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800034a:	4a2f      	ldr	r2, [pc, #188]	; (8000408 <__NVIC_SetPriority+0xd4>)
 800034c:	1dfb      	adds	r3, r7, #7
 800034e:	781b      	ldrb	r3, [r3, #0]
 8000350:	b25b      	sxtb	r3, r3
 8000352:	089b      	lsrs	r3, r3, #2
 8000354:	33c0      	adds	r3, #192	; 0xc0
 8000356:	009b      	lsls	r3, r3, #2
 8000358:	589b      	ldr	r3, [r3, r2]
 800035a:	1dfa      	adds	r2, r7, #7
 800035c:	7812      	ldrb	r2, [r2, #0]
 800035e:	0011      	movs	r1, r2
 8000360:	2203      	movs	r2, #3
 8000362:	400a      	ands	r2, r1
 8000364:	00d2      	lsls	r2, r2, #3
 8000366:	21ff      	movs	r1, #255	; 0xff
 8000368:	4091      	lsls	r1, r2
 800036a:	000a      	movs	r2, r1
 800036c:	43d2      	mvns	r2, r2
 800036e:	401a      	ands	r2, r3
 8000370:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	019b      	lsls	r3, r3, #6
 8000376:	22ff      	movs	r2, #255	; 0xff
 8000378:	401a      	ands	r2, r3
 800037a:	1dfb      	adds	r3, r7, #7
 800037c:	781b      	ldrb	r3, [r3, #0]
 800037e:	0018      	movs	r0, r3
 8000380:	2303      	movs	r3, #3
 8000382:	4003      	ands	r3, r0
 8000384:	00db      	lsls	r3, r3, #3
 8000386:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000388:	481f      	ldr	r0, [pc, #124]	; (8000408 <__NVIC_SetPriority+0xd4>)
 800038a:	1dfb      	adds	r3, r7, #7
 800038c:	781b      	ldrb	r3, [r3, #0]
 800038e:	b25b      	sxtb	r3, r3
 8000390:	089b      	lsrs	r3, r3, #2
 8000392:	430a      	orrs	r2, r1
 8000394:	33c0      	adds	r3, #192	; 0xc0
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800039a:	e031      	b.n	8000400 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800039c:	4a1b      	ldr	r2, [pc, #108]	; (800040c <__NVIC_SetPriority+0xd8>)
 800039e:	1dfb      	adds	r3, r7, #7
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	0019      	movs	r1, r3
 80003a4:	230f      	movs	r3, #15
 80003a6:	400b      	ands	r3, r1
 80003a8:	3b08      	subs	r3, #8
 80003aa:	089b      	lsrs	r3, r3, #2
 80003ac:	3306      	adds	r3, #6
 80003ae:	009b      	lsls	r3, r3, #2
 80003b0:	18d3      	adds	r3, r2, r3
 80003b2:	3304      	adds	r3, #4
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	1dfa      	adds	r2, r7, #7
 80003b8:	7812      	ldrb	r2, [r2, #0]
 80003ba:	0011      	movs	r1, r2
 80003bc:	2203      	movs	r2, #3
 80003be:	400a      	ands	r2, r1
 80003c0:	00d2      	lsls	r2, r2, #3
 80003c2:	21ff      	movs	r1, #255	; 0xff
 80003c4:	4091      	lsls	r1, r2
 80003c6:	000a      	movs	r2, r1
 80003c8:	43d2      	mvns	r2, r2
 80003ca:	401a      	ands	r2, r3
 80003cc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80003ce:	683b      	ldr	r3, [r7, #0]
 80003d0:	019b      	lsls	r3, r3, #6
 80003d2:	22ff      	movs	r2, #255	; 0xff
 80003d4:	401a      	ands	r2, r3
 80003d6:	1dfb      	adds	r3, r7, #7
 80003d8:	781b      	ldrb	r3, [r3, #0]
 80003da:	0018      	movs	r0, r3
 80003dc:	2303      	movs	r3, #3
 80003de:	4003      	ands	r3, r0
 80003e0:	00db      	lsls	r3, r3, #3
 80003e2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80003e4:	4809      	ldr	r0, [pc, #36]	; (800040c <__NVIC_SetPriority+0xd8>)
 80003e6:	1dfb      	adds	r3, r7, #7
 80003e8:	781b      	ldrb	r3, [r3, #0]
 80003ea:	001c      	movs	r4, r3
 80003ec:	230f      	movs	r3, #15
 80003ee:	4023      	ands	r3, r4
 80003f0:	3b08      	subs	r3, #8
 80003f2:	089b      	lsrs	r3, r3, #2
 80003f4:	430a      	orrs	r2, r1
 80003f6:	3306      	adds	r3, #6
 80003f8:	009b      	lsls	r3, r3, #2
 80003fa:	18c3      	adds	r3, r0, r3
 80003fc:	3304      	adds	r3, #4
 80003fe:	601a      	str	r2, [r3, #0]
}
 8000400:	46c0      	nop			; (mov r8, r8)
 8000402:	46bd      	mov	sp, r7
 8000404:	b003      	add	sp, #12
 8000406:	bd90      	pop	{r4, r7, pc}
 8000408:	e000e100 	.word	0xe000e100
 800040c:	e000ed00 	.word	0xe000ed00

08000410 <config_my_tim16>:

#include "stm32g031xx.h"
#include "my_tims.h"

void config_my_tim16 ( uint32_t my_sysclock )
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	RCC->APBENR2		|= RCC_APBENR2_TIM16EN ; 		// Enable TIM16 clock
 8000418:	4b17      	ldr	r3, [pc, #92]	; (8000478 <config_my_tim16+0x68>)
 800041a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800041c:	4b16      	ldr	r3, [pc, #88]	; (8000478 <config_my_tim16+0x68>)
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	0289      	lsls	r1, r1, #10
 8000422:	430a      	orrs	r2, r1
 8000424:	641a      	str	r2, [r3, #64]	; 0x40
	TIM16->PSC 			= (uint16_t) ( ( my_sysclock / 1000 ) - 1 ) ; 	// default: 1 ms = 1000 Hz = ( 16 000 000 Hz / 16 000 )
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	22fa      	movs	r2, #250	; 0xfa
 800042a:	0091      	lsls	r1, r2, #2
 800042c:	0018      	movs	r0, r3
 800042e:	f7ff fe6b 	bl	8000108 <__udivsi3>
 8000432:	0003      	movs	r3, r0
 8000434:	b29b      	uxth	r3, r3
 8000436:	3b01      	subs	r3, #1
 8000438:	b29a      	uxth	r2, r3
 800043a:	4b10      	ldr	r3, [pc, #64]	; (800047c <config_my_tim16+0x6c>)
 800043c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM16->EGR			|= TIM_EGR_UG ; 				// Force EGR.UG update
 800043e:	4b0f      	ldr	r3, [pc, #60]	; (800047c <config_my_tim16+0x6c>)
 8000440:	695a      	ldr	r2, [r3, #20]
 8000442:	4b0e      	ldr	r3, [pc, #56]	; (800047c <config_my_tim16+0x6c>)
 8000444:	2101      	movs	r1, #1
 8000446:	430a      	orrs	r2, r1
 8000448:	615a      	str	r2, [r3, #20]
	TIM16->SR 			&= ~TIM_SR_UIF ;				//Clean UIF Flag
 800044a:	4b0c      	ldr	r3, [pc, #48]	; (800047c <config_my_tim16+0x6c>)
 800044c:	691a      	ldr	r2, [r3, #16]
 800044e:	4b0b      	ldr	r3, [pc, #44]	; (800047c <config_my_tim16+0x6c>)
 8000450:	2101      	movs	r1, #1
 8000452:	438a      	bics	r2, r1
 8000454:	611a      	str	r2, [r3, #16]
	TIM16->DIER 		|= TIM_DIER_UIE ; 				// Enable interrupt generation
 8000456:	4b09      	ldr	r3, [pc, #36]	; (800047c <config_my_tim16+0x6c>)
 8000458:	68da      	ldr	r2, [r3, #12]
 800045a:	4b08      	ldr	r3, [pc, #32]	; (800047c <config_my_tim16+0x6c>)
 800045c:	2101      	movs	r1, #1
 800045e:	430a      	orrs	r2, r1
 8000460:	60da      	str	r2, [r3, #12]
	NVIC_SetPriority 	( TIM16_IRQn , 0 ) ;			// Configure interrupt priority
 8000462:	2100      	movs	r1, #0
 8000464:	2015      	movs	r0, #21
 8000466:	f7ff ff65 	bl	8000334 <__NVIC_SetPriority>
	NVIC_EnableIRQ 		( TIM16_IRQn ) ;				// Enable interrupt
 800046a:	2015      	movs	r0, #21
 800046c:	f7ff ff48 	bl	8000300 <__NVIC_EnableIRQ>
}
 8000470:	46c0      	nop			; (mov r8, r8)
 8000472:	46bd      	mov	sp, r7
 8000474:	b002      	add	sp, #8
 8000476:	bd80      	pop	{r7, pc}
 8000478:	40021000 	.word	0x40021000
 800047c:	40014400 	.word	0x40014400

08000480 <start_my_tim16>:

void start_my_tim16 ( uint16_t my_tim16_arr )
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	0002      	movs	r2, r0
 8000488:	1dbb      	adds	r3, r7, #6
 800048a:	801a      	strh	r2, [r3, #0]
	RCC->APBENR2	|= RCC_APBENR2_TIM16EN ; 	// Enable TIM16 clock
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <start_my_tim16+0x38>)
 800048e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000490:	4b09      	ldr	r3, [pc, #36]	; (80004b8 <start_my_tim16+0x38>)
 8000492:	2180      	movs	r1, #128	; 0x80
 8000494:	0289      	lsls	r1, r1, #10
 8000496:	430a      	orrs	r2, r1
 8000498:	641a      	str	r2, [r3, #64]	; 0x40
	TIM16->ARR 		=  my_tim16_arr - 1 ;	// default: 2 s = 2000 * 0,001s
 800049a:	1dbb      	adds	r3, r7, #6
 800049c:	881b      	ldrh	r3, [r3, #0]
 800049e:	1e5a      	subs	r2, r3, #1
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <start_my_tim16+0x3c>)
 80004a2:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM16->CR1 		|= TIM_CR1_CEN ;		// Start counting TIM16
 80004a4:	4b05      	ldr	r3, [pc, #20]	; (80004bc <start_my_tim16+0x3c>)
 80004a6:	681a      	ldr	r2, [r3, #0]
 80004a8:	4b04      	ldr	r3, [pc, #16]	; (80004bc <start_my_tim16+0x3c>)
 80004aa:	2101      	movs	r1, #1
 80004ac:	430a      	orrs	r2, r1
 80004ae:	601a      	str	r2, [r3, #0]
}
 80004b0:	46c0      	nop			; (mov r8, r8)
 80004b2:	46bd      	mov	sp, r7
 80004b4:	b002      	add	sp, #8
 80004b6:	bd80      	pop	{r7, pc}
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40014400 	.word	0x40014400

080004c0 <my_uart2_init>:
	USART1->CR1 	|=  USART_CR1_TE ;
	USART1->CR1 	|=  USART_CR1_RE ;
}

void my_uart2_init ( void )
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	RCC->IOPENR 	|= RCC_IOPENR_GPIOAEN ;		// Activate clock in GPIOA
 80004c4:	4b19      	ldr	r3, [pc, #100]	; (800052c <my_uart2_init+0x6c>)
 80004c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004c8:	4b18      	ldr	r3, [pc, #96]	; (800052c <my_uart2_init+0x6c>)
 80004ca:	2101      	movs	r1, #1
 80004cc:	430a      	orrs	r2, r1
 80004ce:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER 	&= ~GPIO_MODER_MODE2_0 ; 	// Set Alternate Function (AF) for USART2_TX
 80004d0:	23a0      	movs	r3, #160	; 0xa0
 80004d2:	05db      	lsls	r3, r3, #23
 80004d4:	681a      	ldr	r2, [r3, #0]
 80004d6:	23a0      	movs	r3, #160	; 0xa0
 80004d8:	05db      	lsls	r3, r3, #23
 80004da:	2110      	movs	r1, #16
 80004dc:	438a      	bics	r2, r1
 80004de:	601a      	str	r2, [r3, #0]
	GPIOA->MODER 	&= ~GPIO_MODER_MODE3_0 ; 	// Set Alternate Function (AF) for USART2_RX
 80004e0:	23a0      	movs	r3, #160	; 0xa0
 80004e2:	05db      	lsls	r3, r3, #23
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	23a0      	movs	r3, #160	; 0xa0
 80004e8:	05db      	lsls	r3, r3, #23
 80004ea:	2140      	movs	r1, #64	; 0x40
 80004ec:	438a      	bics	r2, r1
 80004ee:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0]	|= GPIO_AFRL_AFSEL2_0 ;  	// ALERT! AFRL is AFR[0]. Choose AF1
 80004f0:	23a0      	movs	r3, #160	; 0xa0
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	6a1a      	ldr	r2, [r3, #32]
 80004f6:	23a0      	movs	r3, #160	; 0xa0
 80004f8:	05db      	lsls	r3, r3, #23
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0049      	lsls	r1, r1, #1
 80004fe:	430a      	orrs	r2, r1
 8000500:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]	|= GPIO_AFRL_AFSEL3_0 ;  	// ALERT! AFRL is AFR[0]. Choose AF1
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	6a1a      	ldr	r2, [r3, #32]
 8000508:	23a0      	movs	r3, #160	; 0xa0
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2180      	movs	r1, #128	; 0x80
 800050e:	0149      	lsls	r1, r1, #5
 8000510:	430a      	orrs	r2, r1
 8000512:	621a      	str	r2, [r3, #32]
	GPIOA->OTYPER	|= GPIO_OTYPER_OT3 ; 		// Choose Open_drain for RX to avoid P-MOS transistors problems and assuming push-pull expected on device
 8000514:	23a0      	movs	r3, #160	; 0xa0
 8000516:	05db      	lsls	r3, r3, #23
 8000518:	685a      	ldr	r2, [r3, #4]
 800051a:	23a0      	movs	r3, #160	; 0xa0
 800051c:	05db      	lsls	r3, r3, #23
 800051e:	2108      	movs	r1, #8
 8000520:	430a      	orrs	r2, r1
 8000522:	605a      	str	r2, [r3, #4]
}
 8000524:	46c0      	nop			; (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	bd80      	pop	{r7, pc}
 800052a:	46c0      	nop			; (mov r8, r8)
 800052c:	40021000 	.word	0x40021000

08000530 <my_uart2_on>:

void my_uart2_on ( uint16_t my_sysclock , uint16_t br )
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	0002      	movs	r2, r0
 8000538:	1dbb      	adds	r3, r7, #6
 800053a:	801a      	strh	r2, [r3, #0]
 800053c:	1d3b      	adds	r3, r7, #4
 800053e:	1c0a      	adds	r2, r1, #0
 8000540:	801a      	strh	r2, [r3, #0]
	RCC->IOPENR 	|= RCC_IOPENR_GPIOAEN ;		// Activate clock in GPIOA
 8000542:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <my_uart2_on+0x70>)
 8000544:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000546:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <my_uart2_on+0x70>)
 8000548:	2101      	movs	r1, #1
 800054a:	430a      	orrs	r2, r1
 800054c:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR1	|= RCC_APBENR1_USART2EN ;
 800054e:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <my_uart2_on+0x70>)
 8000550:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000552:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <my_uart2_on+0x70>)
 8000554:	2180      	movs	r1, #128	; 0x80
 8000556:	0289      	lsls	r1, r1, #10
 8000558:	430a      	orrs	r2, r1
 800055a:	63da      	str	r2, [r3, #60]	; 0x3c
	USART2->BRR 	= my_sysclock / br ;			// Activate clock for UART
 800055c:	1dba      	adds	r2, r7, #6
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	8812      	ldrh	r2, [r2, #0]
 8000562:	881b      	ldrh	r3, [r3, #0]
 8000564:	0019      	movs	r1, r3
 8000566:	0010      	movs	r0, r2
 8000568:	f7ff fdce 	bl	8000108 <__udivsi3>
 800056c:	0003      	movs	r3, r0
 800056e:	b29a      	uxth	r2, r3
 8000570:	4b0c      	ldr	r3, [pc, #48]	; (80005a4 <my_uart2_on+0x74>)
 8000572:	60da      	str	r2, [r3, #12]
	USART2->CR1 	|=  USART_CR1_UE ;
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <my_uart2_on+0x74>)
 8000576:	681a      	ldr	r2, [r3, #0]
 8000578:	4b0a      	ldr	r3, [pc, #40]	; (80005a4 <my_uart2_on+0x74>)
 800057a:	2101      	movs	r1, #1
 800057c:	430a      	orrs	r2, r1
 800057e:	601a      	str	r2, [r3, #0]
	USART2->CR1 	|=  USART_CR1_TE ;
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <my_uart2_on+0x74>)
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	4b07      	ldr	r3, [pc, #28]	; (80005a4 <my_uart2_on+0x74>)
 8000586:	2108      	movs	r1, #8
 8000588:	430a      	orrs	r2, r1
 800058a:	601a      	str	r2, [r3, #0]
	USART2->CR1 	|=  USART_CR1_RE ;
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <my_uart2_on+0x74>)
 800058e:	681a      	ldr	r2, [r3, #0]
 8000590:	4b04      	ldr	r3, [pc, #16]	; (80005a4 <my_uart2_on+0x74>)
 8000592:	2104      	movs	r1, #4
 8000594:	430a      	orrs	r2, r1
 8000596:	601a      	str	r2, [r3, #0]
}
 8000598:	46c0      	nop			; (mov r8, r8)
 800059a:	46bd      	mov	sp, r7
 800059c:	b002      	add	sp, #8
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	40021000 	.word	0x40021000
 80005a4:	40004400 	.word	0x40004400

080005a8 <__libc_init_array>:
 80005a8:	b570      	push	{r4, r5, r6, lr}
 80005aa:	2600      	movs	r6, #0
 80005ac:	4c0c      	ldr	r4, [pc, #48]	; (80005e0 <__libc_init_array+0x38>)
 80005ae:	4d0d      	ldr	r5, [pc, #52]	; (80005e4 <__libc_init_array+0x3c>)
 80005b0:	1b64      	subs	r4, r4, r5
 80005b2:	10a4      	asrs	r4, r4, #2
 80005b4:	42a6      	cmp	r6, r4
 80005b6:	d109      	bne.n	80005cc <__libc_init_array+0x24>
 80005b8:	2600      	movs	r6, #0
 80005ba:	f000 f819 	bl	80005f0 <_init>
 80005be:	4c0a      	ldr	r4, [pc, #40]	; (80005e8 <__libc_init_array+0x40>)
 80005c0:	4d0a      	ldr	r5, [pc, #40]	; (80005ec <__libc_init_array+0x44>)
 80005c2:	1b64      	subs	r4, r4, r5
 80005c4:	10a4      	asrs	r4, r4, #2
 80005c6:	42a6      	cmp	r6, r4
 80005c8:	d105      	bne.n	80005d6 <__libc_init_array+0x2e>
 80005ca:	bd70      	pop	{r4, r5, r6, pc}
 80005cc:	00b3      	lsls	r3, r6, #2
 80005ce:	58eb      	ldr	r3, [r5, r3]
 80005d0:	4798      	blx	r3
 80005d2:	3601      	adds	r6, #1
 80005d4:	e7ee      	b.n	80005b4 <__libc_init_array+0xc>
 80005d6:	00b3      	lsls	r3, r6, #2
 80005d8:	58eb      	ldr	r3, [r5, r3]
 80005da:	4798      	blx	r3
 80005dc:	3601      	adds	r6, #1
 80005de:	e7f2      	b.n	80005c6 <__libc_init_array+0x1e>
 80005e0:	08000608 	.word	0x08000608
 80005e4:	08000608 	.word	0x08000608
 80005e8:	0800060c 	.word	0x0800060c
 80005ec:	08000608 	.word	0x08000608

080005f0 <_init>:
 80005f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005f6:	bc08      	pop	{r3}
 80005f8:	469e      	mov	lr, r3
 80005fa:	4770      	bx	lr

080005fc <_fini>:
 80005fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005fe:	46c0      	nop			; (mov r8, r8)
 8000600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000602:	bc08      	pop	{r3}
 8000604:	469e      	mov	lr, r3
 8000606:	4770      	bx	lr
