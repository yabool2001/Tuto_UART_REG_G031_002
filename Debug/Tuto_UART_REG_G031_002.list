
Tuto_UART_REG_G031_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000061c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080006dc  080006e4  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080006dc  080006dc  000106e4  2**0
                  CONTENTS
  4 .ARM          00000000  080006dc  080006dc  000106e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080006dc  080006e4  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080006dc  080006dc  000106dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080006e0  080006e0  000106e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000106e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000000  080006e4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080006e4  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000106e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0001070c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000009bb  00000000  00000000  0001074f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000032c  00000000  00000000  0001110a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000e0  00000000  00000000  00011438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000097  00000000  00000000  00011518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c5e3  00000000  00000000  000115af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001463  00000000  00000000  0001db92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00048595  00000000  00000000  0001eff5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000022c  00000000  00000000  0006758c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000677b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080006c4 	.word	0x080006c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	080006c4 	.word	0x080006c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
uint8_t nmea_message[250] ;
uint8_t i_nmea = 0 ;
uint8_t nmea_checksum ;

int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	my_uart2_init () ;
 8000224:	f000 f95a 	bl	80004dc <my_uart2_init>
	my_uart2_on ( MY_G031_SYSCLOCK , MY_UART2_BAUDRATE ) ;
 8000228:	23e1      	movs	r3, #225	; 0xe1
 800022a:	025b      	lsls	r3, r3, #9
 800022c:	4a23      	ldr	r2, [pc, #140]	; (80002bc <main+0x9c>)
 800022e:	0019      	movs	r1, r3
 8000230:	0010      	movs	r0, r2
 8000232:	f000 f9ef 	bl	8000614 <my_uart2_on>
	my_uart1_init () ;
 8000236:	f000 f923 	bl	8000480 <my_uart1_init>
	my_uart1_on ( MY_G031_SYSCLOCK , MY_UART1_BAUDRATE ) ;
 800023a:	2396      	movs	r3, #150	; 0x96
 800023c:	019b      	lsls	r3, r3, #6
 800023e:	4a1f      	ldr	r2, [pc, #124]	; (80002bc <main+0x9c>)
 8000240:	0019      	movs	r1, r3
 8000242:	0010      	movs	r0, r2
 8000244:	f000 f9b2 	bl	80005ac <my_uart1_on>
	while ( !( USART2->ISR & USART_ISR_TXE_TXFNF ) )
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	4b1d      	ldr	r3, [pc, #116]	; (80002c0 <main+0xa0>)
 800024c:	69db      	ldr	r3, [r3, #28]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	4013      	ands	r3, r2
 8000252:	d0fa      	beq.n	800024a <main+0x2a>
	{
		;
	}
	USART2->TDR = '@' ; // TX test
 8000254:	4b1a      	ldr	r3, [pc, #104]	; (80002c0 <main+0xa0>)
 8000256:	2240      	movs	r2, #64	; 0x40
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
	while ( !( USART1->ISR & USART_ISR_TXE_TXFNF ) )
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	4b19      	ldr	r3, [pc, #100]	; (80002c4 <main+0xa4>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	2280      	movs	r2, #128	; 0x80
 8000262:	4013      	ands	r3, r2
 8000264:	d0fa      	beq.n	800025c <main+0x3c>
	{
		;
	}
	USART1->TDR = '@' ; // TX test
 8000266:	4b17      	ldr	r3, [pc, #92]	; (80002c4 <main+0xa4>)
 8000268:	2240      	movs	r2, #64	; 0x40
 800026a:	629a      	str	r2, [r3, #40]	; 0x28
	rx_byte_uart1 = 0x00 ;
 800026c:	4b16      	ldr	r3, [pc, #88]	; (80002c8 <main+0xa8>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
	my_tim16_up = 0 ;
 8000272:	4b16      	ldr	r3, [pc, #88]	; (80002cc <main+0xac>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
	//config_my_tim16 ( MY_G031_SYSCLOCK ) ;
	//start_my_tim16 ( (uint16_t) 1000 ) ;
	/* Loop forever */
	while ( 1 )
	{
		rx_byte_my_uart1 ( &rx_byte_uart1 ) ;
 8000278:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <main+0xa8>)
 800027a:	0018      	movs	r0, r3
 800027c:	f000 f96e 	bl	800055c <rx_byte_my_uart1>
		if ( rx_byte_uart1 )
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <main+0xa8>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f7      	beq.n	8000278 <main+0x58>
		{
			if ( my_nmea_message ( &rx_byte_uart1 , nmea_message , &i_nmea ) == 2 )
 8000288:	4a11      	ldr	r2, [pc, #68]	; (80002d0 <main+0xb0>)
 800028a:	4912      	ldr	r1, [pc, #72]	; (80002d4 <main+0xb4>)
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <main+0xa8>)
 800028e:	0018      	movs	r0, r3
 8000290:	f000 f85f 	bl	8000352 <my_nmea_message>
 8000294:	0003      	movs	r3, r0
 8000296:	2b02      	cmp	r3, #2
 8000298:	d10b      	bne.n	80002b2 <main+0x92>
			{
				//tx_byte_my_uart2 ( &rx_byte_uart1 ) ;
				nmea_checksum = my_nmea_checksum ( nmea_message ) ;
 800029a:	4b0e      	ldr	r3, [pc, #56]	; (80002d4 <main+0xb4>)
 800029c:	0018      	movs	r0, r3
 800029e:	f000 f8c4 	bl	800042a <my_nmea_checksum>
 80002a2:	0003      	movs	r3, r0
 80002a4:	001a      	movs	r2, r3
 80002a6:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <main+0xb8>)
 80002a8:	701a      	strb	r2, [r3, #0]
				tx_byte_my_uart2 ( &nmea_checksum ) ;
 80002aa:	4b0b      	ldr	r3, [pc, #44]	; (80002d8 <main+0xb8>)
 80002ac:	0018      	movs	r0, r3
 80002ae:	f000 f969 	bl	8000584 <tx_byte_my_uart2>
				//tx_string_my_uart2 ( nmea_message , i_nmea ) ;
			}
			//tx_byte_my_uart2 ( &rx_byte_uart1 ) ;
			rx_byte_uart1 = 0x00 ;
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <main+0xa8>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	701a      	strb	r2, [r3, #0]
		rx_byte_my_uart1 ( &rx_byte_uart1 ) ;
 80002b8:	e7de      	b.n	8000278 <main+0x58>
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	00f42400 	.word	0x00f42400
 80002c0:	40004400 	.word	0x40004400
 80002c4:	40013800 	.word	0x40013800
 80002c8:	2000001d 	.word	0x2000001d
 80002cc:	2000001c 	.word	0x2000001c
 80002d0:	2000011a 	.word	0x2000011a
 80002d4:	20000020 	.word	0x20000020
 80002d8:	2000011b 	.word	0x2000011b

080002dc <TIM16_IRQHandler>:
		*/
	}
}

void TIM16_IRQHandler ( void )
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	af00      	add	r7, sp, #0
	my_tim16_up = 1 ;
 80002e0:	4b05      	ldr	r3, [pc, #20]	; (80002f8 <TIM16_IRQHandler+0x1c>)
 80002e2:	2201      	movs	r2, #1
 80002e4:	701a      	strb	r2, [r3, #0]
	TIM16->SR &= ~TIM_SR_UIF ;		//Clean UIF Flag
 80002e6:	4b05      	ldr	r3, [pc, #20]	; (80002fc <TIM16_IRQHandler+0x20>)
 80002e8:	691a      	ldr	r2, [r3, #16]
 80002ea:	4b04      	ldr	r3, [pc, #16]	; (80002fc <TIM16_IRQHandler+0x20>)
 80002ec:	2101      	movs	r1, #1
 80002ee:	438a      	bics	r2, r1
 80002f0:	611a      	str	r2, [r3, #16]
}
 80002f2:	46c0      	nop			; (mov r8, r8)
 80002f4:	46bd      	mov	sp, r7
 80002f6:	bd80      	pop	{r7, pc}
 80002f8:	2000001c 	.word	0x2000001c
 80002fc:	40014400 	.word	0x40014400

08000300 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000300:	480d      	ldr	r0, [pc, #52]	; (8000338 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000302:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000304:	e000      	b.n	8000308 <Reset_Handler+0x8>
 8000306:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000308:	480c      	ldr	r0, [pc, #48]	; (800033c <LoopForever+0x6>)
  ldr r1, =_edata
 800030a:	490d      	ldr	r1, [pc, #52]	; (8000340 <LoopForever+0xa>)
  ldr r2, =_sidata
 800030c:	4a0d      	ldr	r2, [pc, #52]	; (8000344 <LoopForever+0xe>)
  movs r3, #0
 800030e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000310:	e002      	b.n	8000318 <LoopCopyDataInit>

08000312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000316:	3304      	adds	r3, #4

08000318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800031a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800031c:	d3f9      	bcc.n	8000312 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031e:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000320:	4c0a      	ldr	r4, [pc, #40]	; (800034c <LoopForever+0x16>)
  movs r3, #0
 8000322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000324:	e001      	b.n	800032a <LoopFillZerobss>

08000326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000328:	3204      	adds	r2, #4

0800032a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800032a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800032c:	d3fb      	bcc.n	8000326 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032e:	f000 f9a5 	bl	800067c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000332:	f7ff ff75 	bl	8000220 <main>

08000336 <LoopForever>:

LoopForever:
  b LoopForever
 8000336:	e7fe      	b.n	8000336 <LoopForever>
  ldr   r0, =_estack
 8000338:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800033c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000340:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000344:	080006e4 	.word	0x080006e4
  ldr r2, =_sbss
 8000348:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800034c:	2000011c 	.word	0x2000011c

08000350 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000350:	e7fe      	b.n	8000350 <ADC_COMP_IRQHandler>

08000352 <my_nmea_message>:
    return 0;
}
*/

int my_nmea_message ( uint8_t* c , uint8_t* m , uint8_t* i )
{
 8000352:	b580      	push	{r7, lr}
 8000354:	b084      	sub	sp, #16
 8000356:	af00      	add	r7, sp, #0
 8000358:	60f8      	str	r0, [r7, #12]
 800035a:	60b9      	str	r1, [r7, #8]
 800035c:	607a      	str	r2, [r7, #4]
    if ( *c == '$' )
 800035e:	68fb      	ldr	r3, [r7, #12]
 8000360:	781b      	ldrb	r3, [r3, #0]
 8000362:	2b24      	cmp	r3, #36	; 0x24
 8000364:	d117      	bne.n	8000396 <my_nmea_message+0x44>
    {
        *i = 0 ;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	2200      	movs	r2, #0
 800036a:	701a      	strb	r2, [r3, #0]
        m[(*i)++] = *c ;
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	781b      	ldrb	r3, [r3, #0]
 8000370:	1c5a      	adds	r2, r3, #1
 8000372:	b2d1      	uxtb	r1, r2
 8000374:	687a      	ldr	r2, [r7, #4]
 8000376:	7011      	strb	r1, [r2, #0]
 8000378:	001a      	movs	r2, r3
 800037a:	68bb      	ldr	r3, [r7, #8]
 800037c:	189b      	adds	r3, r3, r2
 800037e:	68fa      	ldr	r2, [r7, #12]
 8000380:	7812      	ldrb	r2, [r2, #0]
 8000382:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	001a      	movs	r2, r3
 800038a:	68bb      	ldr	r3, [r7, #8]
 800038c:	189b      	adds	r3, r3, r2
 800038e:	2200      	movs	r2, #0
 8000390:	701a      	strb	r2, [r3, #0]
        return 0 ;
 8000392:	2300      	movs	r3, #0
 8000394:	e045      	b.n	8000422 <my_nmea_message+0xd0>
    }
    if ( ( *c >= ' ' && *c <= '~' && *i > 0 ) || *c == '\r' )
 8000396:	68fb      	ldr	r3, [r7, #12]
 8000398:	781b      	ldrb	r3, [r3, #0]
 800039a:	2b1f      	cmp	r3, #31
 800039c:	d907      	bls.n	80003ae <my_nmea_message+0x5c>
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	781b      	ldrb	r3, [r3, #0]
 80003a2:	2b7e      	cmp	r3, #126	; 0x7e
 80003a4:	d803      	bhi.n	80003ae <my_nmea_message+0x5c>
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d103      	bne.n	80003b6 <my_nmea_message+0x64>
 80003ae:	68fb      	ldr	r3, [r7, #12]
 80003b0:	781b      	ldrb	r3, [r3, #0]
 80003b2:	2b0d      	cmp	r3, #13
 80003b4:	d114      	bne.n	80003e0 <my_nmea_message+0x8e>
    {
        m[(*i)++] = *c ;
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	1c5a      	adds	r2, r3, #1
 80003bc:	b2d1      	uxtb	r1, r2
 80003be:	687a      	ldr	r2, [r7, #4]
 80003c0:	7011      	strb	r1, [r2, #0]
 80003c2:	001a      	movs	r2, r3
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	189b      	adds	r3, r3, r2
 80003c8:	68fa      	ldr	r2, [r7, #12]
 80003ca:	7812      	ldrb	r2, [r2, #0]
 80003cc:	701a      	strb	r2, [r3, #0]
        m[*i] = '\0' ;
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	001a      	movs	r2, r3
 80003d4:	68bb      	ldr	r3, [r7, #8]
 80003d6:	189b      	adds	r3, r3, r2
 80003d8:	2200      	movs	r2, #0
 80003da:	701a      	strb	r2, [r3, #0]
        return 1 ;
 80003dc:	2301      	movs	r3, #1
 80003de:	e020      	b.n	8000422 <my_nmea_message+0xd0>
    }
    if ( *c == '\n' && *i > 1 )
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	2b0a      	cmp	r3, #10
 80003e6:	d11a      	bne.n	800041e <my_nmea_message+0xcc>
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	781b      	ldrb	r3, [r3, #0]
 80003ec:	2b01      	cmp	r3, #1
 80003ee:	d916      	bls.n	800041e <my_nmea_message+0xcc>
    {
        if ( m[--(*i)] == '\r' )
 80003f0:	687b      	ldr	r3, [r7, #4]
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	3b01      	subs	r3, #1
 80003f6:	b2da      	uxtb	r2, r3
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	701a      	strb	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	001a      	movs	r2, r3
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	189b      	adds	r3, r3, r2
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	2b0d      	cmp	r3, #13
 800040a:	d108      	bne.n	800041e <my_nmea_message+0xcc>
        {
            m[*i] = '\0' ;
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	001a      	movs	r2, r3
 8000412:	68bb      	ldr	r3, [r7, #8]
 8000414:	189b      	adds	r3, r3, r2
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
            return 2 ;
 800041a:	2302      	movs	r3, #2
 800041c:	e001      	b.n	8000422 <my_nmea_message+0xd0>
        }
    }
    return -1 ;
 800041e:	2301      	movs	r3, #1
 8000420:	425b      	negs	r3, r3
}
 8000422:	0018      	movs	r0, r3
 8000424:	46bd      	mov	sp, r7
 8000426:	b004      	add	sp, #16
 8000428:	bd80      	pop	{r7, pc}

0800042a <my_nmea_checksum>:

uint8_t my_nmea_checksum ( uint8_t* s )
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b084      	sub	sp, #16
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0 ;
 8000432:	230f      	movs	r3, #15
 8000434:	18fb      	adds	r3, r7, r3
 8000436:	2200      	movs	r2, #0
 8000438:	701a      	strb	r2, [r3, #0]
    int i = 1 ; // Start from index 1 to skip the '$' character
 800043a:	2301      	movs	r3, #1
 800043c:	60bb      	str	r3, [r7, #8]
    while ( s[i] != '*' && s[i] != '\0' )
 800043e:	e00c      	b.n	800045a <my_nmea_checksum+0x30>
    {
        checksum ^= s[i++] ;
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	1c5a      	adds	r2, r3, #1
 8000444:	60ba      	str	r2, [r7, #8]
 8000446:	001a      	movs	r2, r3
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	189b      	adds	r3, r3, r2
 800044c:	7819      	ldrb	r1, [r3, #0]
 800044e:	220f      	movs	r2, #15
 8000450:	18bb      	adds	r3, r7, r2
 8000452:	18ba      	adds	r2, r7, r2
 8000454:	7812      	ldrb	r2, [r2, #0]
 8000456:	404a      	eors	r2, r1
 8000458:	701a      	strb	r2, [r3, #0]
    while ( s[i] != '*' && s[i] != '\0' )
 800045a:	68bb      	ldr	r3, [r7, #8]
 800045c:	687a      	ldr	r2, [r7, #4]
 800045e:	18d3      	adds	r3, r2, r3
 8000460:	781b      	ldrb	r3, [r3, #0]
 8000462:	2b2a      	cmp	r3, #42	; 0x2a
 8000464:	d005      	beq.n	8000472 <my_nmea_checksum+0x48>
 8000466:	68bb      	ldr	r3, [r7, #8]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	18d3      	adds	r3, r2, r3
 800046c:	781b      	ldrb	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d1e6      	bne.n	8000440 <my_nmea_checksum+0x16>
    }
    return checksum ;
 8000472:	230f      	movs	r3, #15
 8000474:	18fb      	adds	r3, r7, r3
 8000476:	781b      	ldrb	r3, [r3, #0]
}
 8000478:	0018      	movs	r0, r3
 800047a:	46bd      	mov	sp, r7
 800047c:	b004      	add	sp, #16
 800047e:	bd80      	pop	{r7, pc}

08000480 <my_uart1_init>:
 */

#include "my_uart.h"

void my_uart1_init ( void )
{
 8000480:	b580      	push	{r7, lr}
 8000482:	af00      	add	r7, sp, #0
	RCC->IOPENR 	|= RCC_IOPENR_GPIOBEN ;		// Activate clock in GPIOB
 8000484:	4b11      	ldr	r3, [pc, #68]	; (80004cc <my_uart1_init+0x4c>)
 8000486:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000488:	4b10      	ldr	r3, [pc, #64]	; (80004cc <my_uart1_init+0x4c>)
 800048a:	2102      	movs	r1, #2
 800048c:	430a      	orrs	r2, r1
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOB->MODER 	&= ~GPIO_MODER_MODE6_0 ; 	// Set Alternate Function (AF) for USART1_TX
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <my_uart1_init+0x50>)
 8000492:	681a      	ldr	r2, [r3, #0]
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <my_uart1_init+0x50>)
 8000496:	490f      	ldr	r1, [pc, #60]	; (80004d4 <my_uart1_init+0x54>)
 8000498:	400a      	ands	r2, r1
 800049a:	601a      	str	r2, [r3, #0]
	GPIOB->MODER 	&= ~GPIO_MODER_MODE7_0 ; 	// Set Alternate Function (AF) for USART1_RX
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <my_uart1_init+0x50>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <my_uart1_init+0x50>)
 80004a2:	490d      	ldr	r1, [pc, #52]	; (80004d8 <my_uart1_init+0x58>)
 80004a4:	400a      	ands	r2, r1
 80004a6:	601a      	str	r2, [r3, #0]
	//GPIOB->OTYPER	|= GPIO_OTYPER_OT7 ; 		// Choose Open_drain for RX to avoid P-MOS transistors problems and assuming push-pull expected on device
	GPIOB->PUPDR	|= GPIO_PUPDR_PUPD6_0 ;		// Tx Pull-up
 80004a8:	4b09      	ldr	r3, [pc, #36]	; (80004d0 <my_uart1_init+0x50>)
 80004aa:	68da      	ldr	r2, [r3, #12]
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <my_uart1_init+0x50>)
 80004ae:	2180      	movs	r1, #128	; 0x80
 80004b0:	0149      	lsls	r1, r1, #5
 80004b2:	430a      	orrs	r2, r1
 80004b4:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR	|= GPIO_PUPDR_PUPD7_0 ;		// Rx Pull-up
 80004b6:	4b06      	ldr	r3, [pc, #24]	; (80004d0 <my_uart1_init+0x50>)
 80004b8:	68da      	ldr	r2, [r3, #12]
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <my_uart1_init+0x50>)
 80004bc:	2180      	movs	r1, #128	; 0x80
 80004be:	01c9      	lsls	r1, r1, #7
 80004c0:	430a      	orrs	r2, r1
 80004c2:	60da      	str	r2, [r3, #12]
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	40021000 	.word	0x40021000
 80004d0:	50000400 	.word	0x50000400
 80004d4:	ffffefff 	.word	0xffffefff
 80004d8:	ffffbfff 	.word	0xffffbfff

080004dc <my_uart2_init>:
	GPIOA->OTYPER	|= GPIO_OTYPER_OT10 ; 		// Choose Open_drain for RX to avoid P-MOS transistors problems and assuming push-pull expected on device
	//GPIOA->PUPDR	|= GPIO_PUPDR_PUPD10_1 ;	// Rx Pull-up
}
*/
void my_uart2_init ( void )
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	RCC->IOPENR 	|= RCC_IOPENR_GPIOAEN ;		// Activate clock in GPIOA
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <my_uart2_init+0x7c>)
 80004e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004e4:	4b1c      	ldr	r3, [pc, #112]	; (8000558 <my_uart2_init+0x7c>)
 80004e6:	2101      	movs	r1, #1
 80004e8:	430a      	orrs	r2, r1
 80004ea:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER 	&= ~GPIO_MODER_MODE2_0 ; 	// Set Alternate Function (AF) for USART2_TX
 80004ec:	23a0      	movs	r3, #160	; 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	23a0      	movs	r3, #160	; 0xa0
 80004f4:	05db      	lsls	r3, r3, #23
 80004f6:	2110      	movs	r1, #16
 80004f8:	438a      	bics	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
	GPIOA->MODER 	&= ~GPIO_MODER_MODE3_0 ; 	// Set Alternate Function (AF) for USART2_RX
 80004fc:	23a0      	movs	r3, #160	; 0xa0
 80004fe:	05db      	lsls	r3, r3, #23
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2140      	movs	r1, #64	; 0x40
 8000508:	438a      	bics	r2, r1
 800050a:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0]	|= GPIO_AFRL_AFSEL2_0 ;  	// ALERT! AFRL is AFR[0]. Choose AF1
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	6a1a      	ldr	r2, [r3, #32]
 8000512:	23a0      	movs	r3, #160	; 0xa0
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	2180      	movs	r1, #128	; 0x80
 8000518:	0049      	lsls	r1, r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]	|= GPIO_AFRL_AFSEL3_0 ;  	// ALERT! AFRL is AFR[0]. Choose AF1
 800051e:	23a0      	movs	r3, #160	; 0xa0
 8000520:	05db      	lsls	r3, r3, #23
 8000522:	6a1a      	ldr	r2, [r3, #32]
 8000524:	23a0      	movs	r3, #160	; 0xa0
 8000526:	05db      	lsls	r3, r3, #23
 8000528:	2180      	movs	r1, #128	; 0x80
 800052a:	0149      	lsls	r1, r1, #5
 800052c:	430a      	orrs	r2, r1
 800052e:	621a      	str	r2, [r3, #32]
	//GPIOA->OTYPER	|= GPIO_OTYPER_OT3 ; 		// Choose Open_drain for RX to avoid P-MOS transistors problems and assuming push-pull expected on device
	GPIOA->PUPDR	|= GPIO_PUPDR_PUPD2_0 ;		// Tx Pull-up
 8000530:	23a0      	movs	r3, #160	; 0xa0
 8000532:	05db      	lsls	r3, r3, #23
 8000534:	68da      	ldr	r2, [r3, #12]
 8000536:	23a0      	movs	r3, #160	; 0xa0
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	2110      	movs	r1, #16
 800053c:	430a      	orrs	r2, r1
 800053e:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR	|= GPIO_PUPDR_PUPD3_0 ;		// Rx Pull-up
 8000540:	23a0      	movs	r3, #160	; 0xa0
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	68da      	ldr	r2, [r3, #12]
 8000546:	23a0      	movs	r3, #160	; 0xa0
 8000548:	05db      	lsls	r3, r3, #23
 800054a:	2140      	movs	r1, #64	; 0x40
 800054c:	430a      	orrs	r2, r1
 800054e:	60da      	str	r2, [r3, #12]
}
 8000550:	46c0      	nop			; (mov r8, r8)
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <rx_byte_my_uart1>:

void rx_byte_my_uart1 ( uint8_t* rx_byte )
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	if ( USART1->ISR & USART_ISR_RXNE_RXFNE )
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <rx_byte_my_uart1+0x24>)
 8000566:	69db      	ldr	r3, [r3, #28]
 8000568:	2220      	movs	r2, #32
 800056a:	4013      	ands	r3, r2
 800056c:	d004      	beq.n	8000578 <rx_byte_my_uart1+0x1c>
	{
		*rx_byte = USART1->RDR ;
 800056e:	4b04      	ldr	r3, [pc, #16]	; (8000580 <rx_byte_my_uart1+0x24>)
 8000570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000572:	b2da      	uxtb	r2, r3
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	701a      	strb	r2, [r3, #0]
	}
	/*else
	{
		__NOP() ;
	}*/
}
 8000578:	46c0      	nop			; (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b002      	add	sp, #8
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40013800 	.word	0x40013800

08000584 <tx_byte_my_uart2>:
		USART1->TDR = *tx_byte ;
	}
}

void tx_byte_my_uart2 ( uint8_t* b )
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
	if ( USART2->ISR & USART_ISR_TXE_TXFNF )
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <tx_byte_my_uart2+0x24>)
 800058e:	69db      	ldr	r3, [r3, #28]
 8000590:	2280      	movs	r2, #128	; 0x80
 8000592:	4013      	ands	r3, r2
 8000594:	d003      	beq.n	800059e <tx_byte_my_uart2+0x1a>
	{
		USART2->TDR = *b ;
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	781a      	ldrb	r2, [r3, #0]
 800059a:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <tx_byte_my_uart2+0x24>)
 800059c:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 800059e:	46c0      	nop			; (mov r8, r8)
 80005a0:	46bd      	mov	sp, r7
 80005a2:	b002      	add	sp, #8
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	40004400 	.word	0x40004400

080005ac <my_uart1_on>:
		}
	}
}

void my_uart1_on ( uint32_t my_sysclock , uint32_t baudrate )
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
 80005b4:	6039      	str	r1, [r7, #0]
	RCC->IOPENR 	|= RCC_IOPENR_GPIOBEN ;		// Activate clock in GPIOB
 80005b6:	4b15      	ldr	r3, [pc, #84]	; (800060c <my_uart1_on+0x60>)
 80005b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ba:	4b14      	ldr	r3, [pc, #80]	; (800060c <my_uart1_on+0x60>)
 80005bc:	2102      	movs	r1, #2
 80005be:	430a      	orrs	r2, r1
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR2	|= RCC_APBENR2_USART1EN ;
 80005c2:	4b12      	ldr	r3, [pc, #72]	; (800060c <my_uart1_on+0x60>)
 80005c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80005c6:	4b11      	ldr	r3, [pc, #68]	; (800060c <my_uart1_on+0x60>)
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	01c9      	lsls	r1, r1, #7
 80005cc:	430a      	orrs	r2, r1
 80005ce:	641a      	str	r2, [r3, #64]	; 0x40
	USART1->BRR 	=  (uint16_t) ( my_sysclock / baudrate ) ;			// Activate clock for UART
 80005d0:	6839      	ldr	r1, [r7, #0]
 80005d2:	6878      	ldr	r0, [r7, #4]
 80005d4:	f7ff fd98 	bl	8000108 <__udivsi3>
 80005d8:	0003      	movs	r3, r0
 80005da:	b29a      	uxth	r2, r3
 80005dc:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <my_uart1_on+0x64>)
 80005de:	60da      	str	r2, [r3, #12]
	USART1->CR1 	|=  USART_CR1_UE ;
 80005e0:	4b0b      	ldr	r3, [pc, #44]	; (8000610 <my_uart1_on+0x64>)
 80005e2:	681a      	ldr	r2, [r3, #0]
 80005e4:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <my_uart1_on+0x64>)
 80005e6:	2101      	movs	r1, #1
 80005e8:	430a      	orrs	r2, r1
 80005ea:	601a      	str	r2, [r3, #0]
	USART1->CR1 	|=  USART_CR1_TE ;
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <my_uart1_on+0x64>)
 80005ee:	681a      	ldr	r2, [r3, #0]
 80005f0:	4b07      	ldr	r3, [pc, #28]	; (8000610 <my_uart1_on+0x64>)
 80005f2:	2108      	movs	r1, #8
 80005f4:	430a      	orrs	r2, r1
 80005f6:	601a      	str	r2, [r3, #0]
	USART1->CR1 	|=  USART_CR1_RE ;
 80005f8:	4b05      	ldr	r3, [pc, #20]	; (8000610 <my_uart1_on+0x64>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b04      	ldr	r3, [pc, #16]	; (8000610 <my_uart1_on+0x64>)
 80005fe:	2104      	movs	r1, #4
 8000600:	430a      	orrs	r2, r1
 8000602:	601a      	str	r2, [r3, #0]
}
 8000604:	46c0      	nop			; (mov r8, r8)
 8000606:	46bd      	mov	sp, r7
 8000608:	b002      	add	sp, #8
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021000 	.word	0x40021000
 8000610:	40013800 	.word	0x40013800

08000614 <my_uart2_on>:
	USART1->CR1 	|=  USART_CR1_TE ;
	USART1->CR1 	|=  USART_CR1_RE ;
}
*/
void my_uart2_on ( uint32_t my_sysclock , uint32_t baudrate )
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b082      	sub	sp, #8
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
 800061c:	6039      	str	r1, [r7, #0]
	RCC->IOPENR 	|= RCC_IOPENR_GPIOAEN ;		// Activate clock in GPIOA
 800061e:	4b15      	ldr	r3, [pc, #84]	; (8000674 <my_uart2_on+0x60>)
 8000620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000622:	4b14      	ldr	r3, [pc, #80]	; (8000674 <my_uart2_on+0x60>)
 8000624:	2101      	movs	r1, #1
 8000626:	430a      	orrs	r2, r1
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR1	|= RCC_APBENR1_USART2EN ;
 800062a:	4b12      	ldr	r3, [pc, #72]	; (8000674 <my_uart2_on+0x60>)
 800062c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <my_uart2_on+0x60>)
 8000630:	2180      	movs	r1, #128	; 0x80
 8000632:	0289      	lsls	r1, r1, #10
 8000634:	430a      	orrs	r2, r1
 8000636:	63da      	str	r2, [r3, #60]	; 0x3c
	USART2->BRR 	= (uint16_t) ( my_sysclock / baudrate ) ;			// Activate clock for UART
 8000638:	6839      	ldr	r1, [r7, #0]
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f7ff fd64 	bl	8000108 <__udivsi3>
 8000640:	0003      	movs	r3, r0
 8000642:	b29a      	uxth	r2, r3
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <my_uart2_on+0x64>)
 8000646:	60da      	str	r2, [r3, #12]
	USART2->CR1 	|=  USART_CR1_UE ;
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <my_uart2_on+0x64>)
 800064a:	681a      	ldr	r2, [r3, #0]
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <my_uart2_on+0x64>)
 800064e:	2101      	movs	r1, #1
 8000650:	430a      	orrs	r2, r1
 8000652:	601a      	str	r2, [r3, #0]
	USART2->CR1 	|=  USART_CR1_TE ;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <my_uart2_on+0x64>)
 8000656:	681a      	ldr	r2, [r3, #0]
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <my_uart2_on+0x64>)
 800065a:	2108      	movs	r1, #8
 800065c:	430a      	orrs	r2, r1
 800065e:	601a      	str	r2, [r3, #0]
	USART2->CR1 	|=  USART_CR1_RE ;
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <my_uart2_on+0x64>)
 8000662:	681a      	ldr	r2, [r3, #0]
 8000664:	4b04      	ldr	r3, [pc, #16]	; (8000678 <my_uart2_on+0x64>)
 8000666:	2104      	movs	r1, #4
 8000668:	430a      	orrs	r2, r1
 800066a:	601a      	str	r2, [r3, #0]
}
 800066c:	46c0      	nop			; (mov r8, r8)
 800066e:	46bd      	mov	sp, r7
 8000670:	b002      	add	sp, #8
 8000672:	bd80      	pop	{r7, pc}
 8000674:	40021000 	.word	0x40021000
 8000678:	40004400 	.word	0x40004400

0800067c <__libc_init_array>:
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	2600      	movs	r6, #0
 8000680:	4c0c      	ldr	r4, [pc, #48]	; (80006b4 <__libc_init_array+0x38>)
 8000682:	4d0d      	ldr	r5, [pc, #52]	; (80006b8 <__libc_init_array+0x3c>)
 8000684:	1b64      	subs	r4, r4, r5
 8000686:	10a4      	asrs	r4, r4, #2
 8000688:	42a6      	cmp	r6, r4
 800068a:	d109      	bne.n	80006a0 <__libc_init_array+0x24>
 800068c:	2600      	movs	r6, #0
 800068e:	f000 f819 	bl	80006c4 <_init>
 8000692:	4c0a      	ldr	r4, [pc, #40]	; (80006bc <__libc_init_array+0x40>)
 8000694:	4d0a      	ldr	r5, [pc, #40]	; (80006c0 <__libc_init_array+0x44>)
 8000696:	1b64      	subs	r4, r4, r5
 8000698:	10a4      	asrs	r4, r4, #2
 800069a:	42a6      	cmp	r6, r4
 800069c:	d105      	bne.n	80006aa <__libc_init_array+0x2e>
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	00b3      	lsls	r3, r6, #2
 80006a2:	58eb      	ldr	r3, [r5, r3]
 80006a4:	4798      	blx	r3
 80006a6:	3601      	adds	r6, #1
 80006a8:	e7ee      	b.n	8000688 <__libc_init_array+0xc>
 80006aa:	00b3      	lsls	r3, r6, #2
 80006ac:	58eb      	ldr	r3, [r5, r3]
 80006ae:	4798      	blx	r3
 80006b0:	3601      	adds	r6, #1
 80006b2:	e7f2      	b.n	800069a <__libc_init_array+0x1e>
 80006b4:	080006dc 	.word	0x080006dc
 80006b8:	080006dc 	.word	0x080006dc
 80006bc:	080006e0 	.word	0x080006e0
 80006c0:	080006dc 	.word	0x080006dc

080006c4 <_init>:
 80006c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006ca:	bc08      	pop	{r3}
 80006cc:	469e      	mov	lr, r3
 80006ce:	4770      	bx	lr

080006d0 <_fini>:
 80006d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006d2:	46c0      	nop			; (mov r8, r8)
 80006d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80006d6:	bc08      	pop	{r3}
 80006d8:	469e      	mov	lr, r3
 80006da:	4770      	bx	lr
