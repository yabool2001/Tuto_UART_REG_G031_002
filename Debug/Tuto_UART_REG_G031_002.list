
Tuto_UART_REG_G031_002.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004c4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000584  0800058c  0001058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000584  08000584  0001058c  2**0
                  CONTENTS
  4 .ARM          00000000  08000584  08000584  0001058c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000584  0800058c  0001058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000584  08000584  00010584  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000588  08000588  00010588  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  0001058c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000000  0800058c  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800058c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001058c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000105b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000007ce  00000000  00000000  000105f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000023f  00000000  00000000  00010dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000a8  00000000  00000000  00011008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000071  00000000  00000000  000110b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000c3a4  00000000  00000000  00011121  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00000ccf  00000000  00000000  0001d4c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00044a03  00000000  00000000  0001e194  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000019c  00000000  00000000  00062b98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00062d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000000 	.word	0x20000000
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800056c 	.word	0x0800056c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000004 	.word	0x20000004
 8000104:	0800056c 	.word	0x0800056c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
uint8_t my_tim16_up ;
uint8_t rx_byte_uart1[1] ;


int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
	my_uart2_init () ;
 8000224:	f000 f8ac 	bl	8000380 <my_uart2_init>
	my_uart2_on ( MY_G031_SYSCLOCK , MY_UART2_BAUDRATE ) ;
 8000228:	23e1      	movs	r3, #225	; 0xe1
 800022a:	025b      	lsls	r3, r3, #9
 800022c:	4a1a      	ldr	r2, [pc, #104]	; (8000298 <main+0x78>)
 800022e:	0019      	movs	r1, r3
 8000230:	0010      	movs	r0, r2
 8000232:	f000 f943 	bl	80004bc <my_uart2_on>
	my_uart1_init () ;
 8000236:	f000 f875 	bl	8000324 <my_uart1_init>
	my_uart1_on ( MY_G031_SYSCLOCK , MY_UART1_BAUDRATE ) ;
 800023a:	2396      	movs	r3, #150	; 0x96
 800023c:	019b      	lsls	r3, r3, #6
 800023e:	4a16      	ldr	r2, [pc, #88]	; (8000298 <main+0x78>)
 8000240:	0019      	movs	r1, r3
 8000242:	0010      	movs	r0, r2
 8000244:	f000 f906 	bl	8000454 <my_uart1_on>
	while ( !( USART2->ISR & USART_ISR_TXE_TXFNF ) )
 8000248:	46c0      	nop			; (mov r8, r8)
 800024a:	4b14      	ldr	r3, [pc, #80]	; (800029c <main+0x7c>)
 800024c:	69db      	ldr	r3, [r3, #28]
 800024e:	2280      	movs	r2, #128	; 0x80
 8000250:	4013      	ands	r3, r2
 8000252:	d0fa      	beq.n	800024a <main+0x2a>
	{
		;
	}
	USART2->TDR = '@' ; // TX test
 8000254:	4b11      	ldr	r3, [pc, #68]	; (800029c <main+0x7c>)
 8000256:	2240      	movs	r2, #64	; 0x40
 8000258:	629a      	str	r2, [r3, #40]	; 0x28
	while ( !( USART1->ISR & USART_ISR_TXE_TXFNF ) )
 800025a:	46c0      	nop			; (mov r8, r8)
 800025c:	4b10      	ldr	r3, [pc, #64]	; (80002a0 <main+0x80>)
 800025e:	69db      	ldr	r3, [r3, #28]
 8000260:	2280      	movs	r2, #128	; 0x80
 8000262:	4013      	ands	r3, r2
 8000264:	d0fa      	beq.n	800025c <main+0x3c>
	{
		;
	}
	USART1->TDR = '@' ; // TX test
 8000266:	4b0e      	ldr	r3, [pc, #56]	; (80002a0 <main+0x80>)
 8000268:	2240      	movs	r2, #64	; 0x40
 800026a:	629a      	str	r2, [r3, #40]	; 0x28
	rx_byte_uart1[0] = 0x00 ;
 800026c:	4b0d      	ldr	r3, [pc, #52]	; (80002a4 <main+0x84>)
 800026e:	2200      	movs	r2, #0
 8000270:	701a      	strb	r2, [r3, #0]
	my_tim16_up = 0 ;
 8000272:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <main+0x88>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
	//config_my_tim16 ( MY_G031_SYSCLOCK ) ;
	//start_my_tim16 ( (uint16_t) 1000 ) ;
	/* Loop forever */
	while ( 1 )
	{
		rx_byte_my_uart1 ( rx_byte_uart1 ) ;
 8000278:	4b0a      	ldr	r3, [pc, #40]	; (80002a4 <main+0x84>)
 800027a:	0018      	movs	r0, r3
 800027c:	f000 f8c0 	bl	8000400 <rx_byte_my_uart1>
		if ( rx_byte_uart1[0] )
 8000280:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <main+0x84>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	2b00      	cmp	r3, #0
 8000286:	d0f7      	beq.n	8000278 <main+0x58>
		{
			tx_byte_my_uart2 ( rx_byte_uart1 ) ;
 8000288:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <main+0x84>)
 800028a:	0018      	movs	r0, r3
 800028c:	f000 f8ce 	bl	800042c <tx_byte_my_uart2>
			rx_byte_uart1[0] = 0x00 ;
 8000290:	4b04      	ldr	r3, [pc, #16]	; (80002a4 <main+0x84>)
 8000292:	2200      	movs	r2, #0
 8000294:	701a      	strb	r2, [r3, #0]
		rx_byte_my_uart1 ( rx_byte_uart1 ) ;
 8000296:	e7ef      	b.n	8000278 <main+0x58>
 8000298:	00f42400 	.word	0x00f42400
 800029c:	40004400 	.word	0x40004400
 80002a0:	40013800 	.word	0x40013800
 80002a4:	20000020 	.word	0x20000020
 80002a8:	2000001c 	.word	0x2000001c

080002ac <TIM16_IRQHandler>:
		*/
	}
}

void TIM16_IRQHandler ( void )
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
	my_tim16_up = 1 ;
 80002b0:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <TIM16_IRQHandler+0x1c>)
 80002b2:	2201      	movs	r2, #1
 80002b4:	701a      	strb	r2, [r3, #0]
	TIM16->SR &= ~TIM_SR_UIF ;		//Clean UIF Flag
 80002b6:	4b05      	ldr	r3, [pc, #20]	; (80002cc <TIM16_IRQHandler+0x20>)
 80002b8:	691a      	ldr	r2, [r3, #16]
 80002ba:	4b04      	ldr	r3, [pc, #16]	; (80002cc <TIM16_IRQHandler+0x20>)
 80002bc:	2101      	movs	r1, #1
 80002be:	438a      	bics	r2, r1
 80002c0:	611a      	str	r2, [r3, #16]
}
 80002c2:	46c0      	nop			; (mov r8, r8)
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	2000001c 	.word	0x2000001c
 80002cc:	40014400 	.word	0x40014400

080002d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002d0:	480d      	ldr	r0, [pc, #52]	; (8000308 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002d2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002d4:	e000      	b.n	80002d8 <Reset_Handler+0x8>
 80002d6:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002d8:	480c      	ldr	r0, [pc, #48]	; (800030c <LoopForever+0x6>)
  ldr r1, =_edata
 80002da:	490d      	ldr	r1, [pc, #52]	; (8000310 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002dc:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <LoopForever+0xe>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002e0:	e002      	b.n	80002e8 <LoopCopyDataInit>

080002e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002e6:	3304      	adds	r3, #4

080002e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ec:	d3f9      	bcc.n	80002e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002f0:	4c0a      	ldr	r4, [pc, #40]	; (800031c <LoopForever+0x16>)
  movs r3, #0
 80002f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002f4:	e001      	b.n	80002fa <LoopFillZerobss>

080002f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002f8:	3204      	adds	r2, #4

080002fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002fc:	d3fb      	bcc.n	80002f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002fe:	f000 f911 	bl	8000524 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000302:	f7ff ff8d 	bl	8000220 <main>

08000306 <LoopForever>:

LoopForever:
  b LoopForever
 8000306:	e7fe      	b.n	8000306 <LoopForever>
  ldr   r0, =_estack
 8000308:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800030c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000310:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000314:	0800058c 	.word	0x0800058c
  ldr r2, =_sbss
 8000318:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800031c:	20000024 	.word	0x20000024

08000320 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000320:	e7fe      	b.n	8000320 <ADC_COMP_IRQHandler>
	...

08000324 <my_uart1_init>:
 */

#include "my_uart.h"

void my_uart1_init ( void )
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	RCC->IOPENR 	|= RCC_IOPENR_GPIOBEN ;		// Activate clock in GPIOB
 8000328:	4b11      	ldr	r3, [pc, #68]	; (8000370 <my_uart1_init+0x4c>)
 800032a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <my_uart1_init+0x4c>)
 800032e:	2102      	movs	r1, #2
 8000330:	430a      	orrs	r2, r1
 8000332:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOB->MODER 	&= ~GPIO_MODER_MODE6_0 ; 	// Set Alternate Function (AF) for USART1_TX
 8000334:	4b0f      	ldr	r3, [pc, #60]	; (8000374 <my_uart1_init+0x50>)
 8000336:	681a      	ldr	r2, [r3, #0]
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <my_uart1_init+0x50>)
 800033a:	490f      	ldr	r1, [pc, #60]	; (8000378 <my_uart1_init+0x54>)
 800033c:	400a      	ands	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
	GPIOB->MODER 	&= ~GPIO_MODER_MODE7_0 ; 	// Set Alternate Function (AF) for USART1_RX
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <my_uart1_init+0x50>)
 8000342:	681a      	ldr	r2, [r3, #0]
 8000344:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <my_uart1_init+0x50>)
 8000346:	490d      	ldr	r1, [pc, #52]	; (800037c <my_uart1_init+0x58>)
 8000348:	400a      	ands	r2, r1
 800034a:	601a      	str	r2, [r3, #0]
	//GPIOB->OTYPER	|= GPIO_OTYPER_OT7 ; 		// Choose Open_drain for RX to avoid P-MOS transistors problems and assuming push-pull expected on device
	GPIOB->PUPDR	|= GPIO_PUPDR_PUPD6_0 ;		// Tx Pull-up
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <my_uart1_init+0x50>)
 800034e:	68da      	ldr	r2, [r3, #12]
 8000350:	4b08      	ldr	r3, [pc, #32]	; (8000374 <my_uart1_init+0x50>)
 8000352:	2180      	movs	r1, #128	; 0x80
 8000354:	0149      	lsls	r1, r1, #5
 8000356:	430a      	orrs	r2, r1
 8000358:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR	|= GPIO_PUPDR_PUPD7_0 ;		// Rx Pull-up
 800035a:	4b06      	ldr	r3, [pc, #24]	; (8000374 <my_uart1_init+0x50>)
 800035c:	68da      	ldr	r2, [r3, #12]
 800035e:	4b05      	ldr	r3, [pc, #20]	; (8000374 <my_uart1_init+0x50>)
 8000360:	2180      	movs	r1, #128	; 0x80
 8000362:	01c9      	lsls	r1, r1, #7
 8000364:	430a      	orrs	r2, r1
 8000366:	60da      	str	r2, [r3, #12]
}
 8000368:	46c0      	nop			; (mov r8, r8)
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	46c0      	nop			; (mov r8, r8)
 8000370:	40021000 	.word	0x40021000
 8000374:	50000400 	.word	0x50000400
 8000378:	ffffefff 	.word	0xffffefff
 800037c:	ffffbfff 	.word	0xffffbfff

08000380 <my_uart2_init>:
	GPIOA->OTYPER	|= GPIO_OTYPER_OT10 ; 		// Choose Open_drain for RX to avoid P-MOS transistors problems and assuming push-pull expected on device
	//GPIOA->PUPDR	|= GPIO_PUPDR_PUPD10_1 ;	// Rx Pull-up
}
*/
void my_uart2_init ( void )
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	RCC->IOPENR 	|= RCC_IOPENR_GPIOAEN ;		// Activate clock in GPIOA
 8000384:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <my_uart2_init+0x7c>)
 8000386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000388:	4b1c      	ldr	r3, [pc, #112]	; (80003fc <my_uart2_init+0x7c>)
 800038a:	2101      	movs	r1, #1
 800038c:	430a      	orrs	r2, r1
 800038e:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOA->MODER 	&= ~GPIO_MODER_MODE2_0 ; 	// Set Alternate Function (AF) for USART2_TX
 8000390:	23a0      	movs	r3, #160	; 0xa0
 8000392:	05db      	lsls	r3, r3, #23
 8000394:	681a      	ldr	r2, [r3, #0]
 8000396:	23a0      	movs	r3, #160	; 0xa0
 8000398:	05db      	lsls	r3, r3, #23
 800039a:	2110      	movs	r1, #16
 800039c:	438a      	bics	r2, r1
 800039e:	601a      	str	r2, [r3, #0]
	GPIOA->MODER 	&= ~GPIO_MODER_MODE3_0 ; 	// Set Alternate Function (AF) for USART2_RX
 80003a0:	23a0      	movs	r3, #160	; 0xa0
 80003a2:	05db      	lsls	r3, r3, #23
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	23a0      	movs	r3, #160	; 0xa0
 80003a8:	05db      	lsls	r3, r3, #23
 80003aa:	2140      	movs	r1, #64	; 0x40
 80003ac:	438a      	bics	r2, r1
 80003ae:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0]	|= GPIO_AFRL_AFSEL2_0 ;  	// ALERT! AFRL is AFR[0]. Choose AF1
 80003b0:	23a0      	movs	r3, #160	; 0xa0
 80003b2:	05db      	lsls	r3, r3, #23
 80003b4:	6a1a      	ldr	r2, [r3, #32]
 80003b6:	23a0      	movs	r3, #160	; 0xa0
 80003b8:	05db      	lsls	r3, r3, #23
 80003ba:	2180      	movs	r1, #128	; 0x80
 80003bc:	0049      	lsls	r1, r1, #1
 80003be:	430a      	orrs	r2, r1
 80003c0:	621a      	str	r2, [r3, #32]
	GPIOA->AFR[0]	|= GPIO_AFRL_AFSEL3_0 ;  	// ALERT! AFRL is AFR[0]. Choose AF1
 80003c2:	23a0      	movs	r3, #160	; 0xa0
 80003c4:	05db      	lsls	r3, r3, #23
 80003c6:	6a1a      	ldr	r2, [r3, #32]
 80003c8:	23a0      	movs	r3, #160	; 0xa0
 80003ca:	05db      	lsls	r3, r3, #23
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0149      	lsls	r1, r1, #5
 80003d0:	430a      	orrs	r2, r1
 80003d2:	621a      	str	r2, [r3, #32]
	//GPIOA->OTYPER	|= GPIO_OTYPER_OT3 ; 		// Choose Open_drain for RX to avoid P-MOS transistors problems and assuming push-pull expected on device
	GPIOA->PUPDR	|= GPIO_PUPDR_PUPD2_0 ;		// Tx Pull-up
 80003d4:	23a0      	movs	r3, #160	; 0xa0
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	68da      	ldr	r2, [r3, #12]
 80003da:	23a0      	movs	r3, #160	; 0xa0
 80003dc:	05db      	lsls	r3, r3, #23
 80003de:	2110      	movs	r1, #16
 80003e0:	430a      	orrs	r2, r1
 80003e2:	60da      	str	r2, [r3, #12]
	GPIOA->PUPDR	|= GPIO_PUPDR_PUPD3_0 ;		// Rx Pull-up
 80003e4:	23a0      	movs	r3, #160	; 0xa0
 80003e6:	05db      	lsls	r3, r3, #23
 80003e8:	68da      	ldr	r2, [r3, #12]
 80003ea:	23a0      	movs	r3, #160	; 0xa0
 80003ec:	05db      	lsls	r3, r3, #23
 80003ee:	2140      	movs	r1, #64	; 0x40
 80003f0:	430a      	orrs	r2, r1
 80003f2:	60da      	str	r2, [r3, #12]
}
 80003f4:	46c0      	nop			; (mov r8, r8)
 80003f6:	46bd      	mov	sp, r7
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)
 80003fc:	40021000 	.word	0x40021000

08000400 <rx_byte_my_uart1>:

void rx_byte_my_uart1 ( uint8_t* rx_byte )
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
	if ( USART1->ISR & USART_ISR_RXNE_RXFNE )
 8000408:	4b07      	ldr	r3, [pc, #28]	; (8000428 <rx_byte_my_uart1+0x28>)
 800040a:	69db      	ldr	r3, [r3, #28]
 800040c:	2220      	movs	r2, #32
 800040e:	4013      	ands	r3, r2
 8000410:	d005      	beq.n	800041e <rx_byte_my_uart1+0x1e>
	{
		rx_byte[0] = USART1->RDR ;
 8000412:	4b05      	ldr	r3, [pc, #20]	; (8000428 <rx_byte_my_uart1+0x28>)
 8000414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000416:	b2da      	uxtb	r2, r3
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	701a      	strb	r2, [r3, #0]
	}
	else
	{
		__NOP() ;
	}
}
 800041c:	e000      	b.n	8000420 <rx_byte_my_uart1+0x20>
		__NOP() ;
 800041e:	46c0      	nop			; (mov r8, r8)
}
 8000420:	46c0      	nop			; (mov r8, r8)
 8000422:	46bd      	mov	sp, r7
 8000424:	b002      	add	sp, #8
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40013800 	.word	0x40013800

0800042c <tx_byte_my_uart2>:
		USART1->TDR = tx_byte[0] ;
	}
}

void tx_byte_my_uart2 ( uint8_t* tx_byte )
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
	if ( USART2->ISR & USART_ISR_TXE_TXFNF )
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <tx_byte_my_uart2+0x24>)
 8000436:	69db      	ldr	r3, [r3, #28]
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	4013      	ands	r3, r2
 800043c:	d003      	beq.n	8000446 <tx_byte_my_uart2+0x1a>
	{
		USART2->TDR = tx_byte[0] ;
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	781a      	ldrb	r2, [r3, #0]
 8000442:	4b03      	ldr	r3, [pc, #12]	; (8000450 <tx_byte_my_uart2+0x24>)
 8000444:	629a      	str	r2, [r3, #40]	; 0x28
	}
}
 8000446:	46c0      	nop			; (mov r8, r8)
 8000448:	46bd      	mov	sp, r7
 800044a:	b002      	add	sp, #8
 800044c:	bd80      	pop	{r7, pc}
 800044e:	46c0      	nop			; (mov r8, r8)
 8000450:	40004400 	.word	0x40004400

08000454 <my_uart1_on>:

void my_uart1_on ( uint32_t my_sysclock , uint32_t baudrate )
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
 800045c:	6039      	str	r1, [r7, #0]
	RCC->IOPENR 	|= RCC_IOPENR_GPIOBEN ;		// Activate clock in GPIOB
 800045e:	4b15      	ldr	r3, [pc, #84]	; (80004b4 <my_uart1_on+0x60>)
 8000460:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000462:	4b14      	ldr	r3, [pc, #80]	; (80004b4 <my_uart1_on+0x60>)
 8000464:	2102      	movs	r1, #2
 8000466:	430a      	orrs	r2, r1
 8000468:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR2	|= RCC_APBENR2_USART1EN ;
 800046a:	4b12      	ldr	r3, [pc, #72]	; (80004b4 <my_uart1_on+0x60>)
 800046c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800046e:	4b11      	ldr	r3, [pc, #68]	; (80004b4 <my_uart1_on+0x60>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	01c9      	lsls	r1, r1, #7
 8000474:	430a      	orrs	r2, r1
 8000476:	641a      	str	r2, [r3, #64]	; 0x40
	USART1->BRR 	=  (uint16_t) ( my_sysclock / baudrate ) ;			// Activate clock for UART
 8000478:	6839      	ldr	r1, [r7, #0]
 800047a:	6878      	ldr	r0, [r7, #4]
 800047c:	f7ff fe44 	bl	8000108 <__udivsi3>
 8000480:	0003      	movs	r3, r0
 8000482:	b29a      	uxth	r2, r3
 8000484:	4b0c      	ldr	r3, [pc, #48]	; (80004b8 <my_uart1_on+0x64>)
 8000486:	60da      	str	r2, [r3, #12]
	USART1->CR1 	|=  USART_CR1_UE ;
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <my_uart1_on+0x64>)
 800048a:	681a      	ldr	r2, [r3, #0]
 800048c:	4b0a      	ldr	r3, [pc, #40]	; (80004b8 <my_uart1_on+0x64>)
 800048e:	2101      	movs	r1, #1
 8000490:	430a      	orrs	r2, r1
 8000492:	601a      	str	r2, [r3, #0]
	USART1->CR1 	|=  USART_CR1_TE ;
 8000494:	4b08      	ldr	r3, [pc, #32]	; (80004b8 <my_uart1_on+0x64>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <my_uart1_on+0x64>)
 800049a:	2108      	movs	r1, #8
 800049c:	430a      	orrs	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
	USART1->CR1 	|=  USART_CR1_RE ;
 80004a0:	4b05      	ldr	r3, [pc, #20]	; (80004b8 <my_uart1_on+0x64>)
 80004a2:	681a      	ldr	r2, [r3, #0]
 80004a4:	4b04      	ldr	r3, [pc, #16]	; (80004b8 <my_uart1_on+0x64>)
 80004a6:	2104      	movs	r1, #4
 80004a8:	430a      	orrs	r2, r1
 80004aa:	601a      	str	r2, [r3, #0]
}
 80004ac:	46c0      	nop			; (mov r8, r8)
 80004ae:	46bd      	mov	sp, r7
 80004b0:	b002      	add	sp, #8
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	40013800 	.word	0x40013800

080004bc <my_uart2_on>:
	USART1->CR1 	|=  USART_CR1_TE ;
	USART1->CR1 	|=  USART_CR1_RE ;
}
*/
void my_uart2_on ( uint32_t my_sysclock , uint32_t baudrate )
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	6078      	str	r0, [r7, #4]
 80004c4:	6039      	str	r1, [r7, #0]
	RCC->IOPENR 	|= RCC_IOPENR_GPIOAEN ;		// Activate clock in GPIOA
 80004c6:	4b15      	ldr	r3, [pc, #84]	; (800051c <my_uart2_on+0x60>)
 80004c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80004ca:	4b14      	ldr	r3, [pc, #80]	; (800051c <my_uart2_on+0x60>)
 80004cc:	2101      	movs	r1, #1
 80004ce:	430a      	orrs	r2, r1
 80004d0:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->APBENR1	|= RCC_APBENR1_USART2EN ;
 80004d2:	4b12      	ldr	r3, [pc, #72]	; (800051c <my_uart2_on+0x60>)
 80004d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80004d6:	4b11      	ldr	r3, [pc, #68]	; (800051c <my_uart2_on+0x60>)
 80004d8:	2180      	movs	r1, #128	; 0x80
 80004da:	0289      	lsls	r1, r1, #10
 80004dc:	430a      	orrs	r2, r1
 80004de:	63da      	str	r2, [r3, #60]	; 0x3c
	USART2->BRR 	= (uint16_t) ( my_sysclock / baudrate ) ;			// Activate clock for UART
 80004e0:	6839      	ldr	r1, [r7, #0]
 80004e2:	6878      	ldr	r0, [r7, #4]
 80004e4:	f7ff fe10 	bl	8000108 <__udivsi3>
 80004e8:	0003      	movs	r3, r0
 80004ea:	b29a      	uxth	r2, r3
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <my_uart2_on+0x64>)
 80004ee:	60da      	str	r2, [r3, #12]
	USART2->CR1 	|=  USART_CR1_UE ;
 80004f0:	4b0b      	ldr	r3, [pc, #44]	; (8000520 <my_uart2_on+0x64>)
 80004f2:	681a      	ldr	r2, [r3, #0]
 80004f4:	4b0a      	ldr	r3, [pc, #40]	; (8000520 <my_uart2_on+0x64>)
 80004f6:	2101      	movs	r1, #1
 80004f8:	430a      	orrs	r2, r1
 80004fa:	601a      	str	r2, [r3, #0]
	USART2->CR1 	|=  USART_CR1_TE ;
 80004fc:	4b08      	ldr	r3, [pc, #32]	; (8000520 <my_uart2_on+0x64>)
 80004fe:	681a      	ldr	r2, [r3, #0]
 8000500:	4b07      	ldr	r3, [pc, #28]	; (8000520 <my_uart2_on+0x64>)
 8000502:	2108      	movs	r1, #8
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]
	USART2->CR1 	|=  USART_CR1_RE ;
 8000508:	4b05      	ldr	r3, [pc, #20]	; (8000520 <my_uart2_on+0x64>)
 800050a:	681a      	ldr	r2, [r3, #0]
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <my_uart2_on+0x64>)
 800050e:	2104      	movs	r1, #4
 8000510:	430a      	orrs	r2, r1
 8000512:	601a      	str	r2, [r3, #0]
}
 8000514:	46c0      	nop			; (mov r8, r8)
 8000516:	46bd      	mov	sp, r7
 8000518:	b002      	add	sp, #8
 800051a:	bd80      	pop	{r7, pc}
 800051c:	40021000 	.word	0x40021000
 8000520:	40004400 	.word	0x40004400

08000524 <__libc_init_array>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	2600      	movs	r6, #0
 8000528:	4c0c      	ldr	r4, [pc, #48]	; (800055c <__libc_init_array+0x38>)
 800052a:	4d0d      	ldr	r5, [pc, #52]	; (8000560 <__libc_init_array+0x3c>)
 800052c:	1b64      	subs	r4, r4, r5
 800052e:	10a4      	asrs	r4, r4, #2
 8000530:	42a6      	cmp	r6, r4
 8000532:	d109      	bne.n	8000548 <__libc_init_array+0x24>
 8000534:	2600      	movs	r6, #0
 8000536:	f000 f819 	bl	800056c <_init>
 800053a:	4c0a      	ldr	r4, [pc, #40]	; (8000564 <__libc_init_array+0x40>)
 800053c:	4d0a      	ldr	r5, [pc, #40]	; (8000568 <__libc_init_array+0x44>)
 800053e:	1b64      	subs	r4, r4, r5
 8000540:	10a4      	asrs	r4, r4, #2
 8000542:	42a6      	cmp	r6, r4
 8000544:	d105      	bne.n	8000552 <__libc_init_array+0x2e>
 8000546:	bd70      	pop	{r4, r5, r6, pc}
 8000548:	00b3      	lsls	r3, r6, #2
 800054a:	58eb      	ldr	r3, [r5, r3]
 800054c:	4798      	blx	r3
 800054e:	3601      	adds	r6, #1
 8000550:	e7ee      	b.n	8000530 <__libc_init_array+0xc>
 8000552:	00b3      	lsls	r3, r6, #2
 8000554:	58eb      	ldr	r3, [r5, r3]
 8000556:	4798      	blx	r3
 8000558:	3601      	adds	r6, #1
 800055a:	e7f2      	b.n	8000542 <__libc_init_array+0x1e>
 800055c:	08000584 	.word	0x08000584
 8000560:	08000584 	.word	0x08000584
 8000564:	08000588 	.word	0x08000588
 8000568:	08000584 	.word	0x08000584

0800056c <_init>:
 800056c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800056e:	46c0      	nop			; (mov r8, r8)
 8000570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000572:	bc08      	pop	{r3}
 8000574:	469e      	mov	lr, r3
 8000576:	4770      	bx	lr

08000578 <_fini>:
 8000578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800057e:	bc08      	pop	{r3}
 8000580:	469e      	mov	lr, r3
 8000582:	4770      	bx	lr
